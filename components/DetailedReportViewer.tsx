"use client"

import { useState } from "react"
import { FileText, Download, Copy, Check, Eye, EyeOff, RefreshCw } from "lucide-react"
import ReactMarkdown from "react-markdown"
import toast from "react-hot-toast"

interface DetailedReportViewerProps {
  detailedReport: string | null
  reportId: string
}

export default function DetailedReportViewer({ detailedReport, reportId }: DetailedReportViewerProps) {
  const [isExpanded, setIsExpanded] = useState(false)
  const [copied, setCopied] = useState(false)
  const [generating, setGenerating] = useState(false)

  // Ensure detailedReport is a string
  const reportContent = typeof detailedReport === 'string' ? detailedReport : ''

  const handleCopy = async () => {
    if (reportContent) {
      try {
        await navigator.clipboard.writeText(reportContent)
        setCopied(true)
        toast.success("Detailed report copied to clipboard!")
        setTimeout(() => setCopied(false), 2000)
      } catch (error) {
        toast.error("Failed to copy report")
      }
    }
  }

  const handleDownload = () => {
    if (reportContent) {
      const blob = new Blob([reportContent], { type: 'text/plain' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `detailed-report-${reportId}.txt`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
      toast.success("Detailed report downloaded!")
    }
  }

  const handleGenerateReport = async () => {
    setGenerating(true)
    try {
      const response = await fetch(`/api/reports/${reportId}/generate-detailed`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      })

      if (response.ok) {
        const data = await response.json()
        toast.success('Detailed report generated successfully!')
        // Refresh the page to show the new report
        window.location.reload()
      } else {
        const errorData = await response.json()
        toast.error(errorData.error || 'Failed to generate detailed report')
      }
    } catch (error) {
      console.error('Error generating detailed report:', error)
      toast.error('Failed to generate detailed report')
    } finally {
      setGenerating(false)
    }
  }

  if (!detailedReport) {
    return (
      <div className="bg-slate-800/50 rounded-lg border border-slate-700 p-6">
        <div className="flex items-center gap-3 mb-4">
          <FileText className="w-6 h-6 text-slate-400" />
          <h3 className="text-lg font-semibold text-white">AI-Generated Detailed Report</h3>
        </div>
        <div className="text-center py-8">
          <FileText className="w-12 h-12 text-slate-500 mx-auto mb-4" />
          <p className="text-slate-400 mb-2">No detailed report available</p>
          <p className="text-sm text-slate-500 mb-4">
            The AI-powered detailed report generation may have failed or is still processing.
          </p>
          <button
            onClick={handleGenerateReport}
            disabled={generating}
            className="flex items-center gap-2 px-4 py-2 bg-cyan-600 hover:bg-cyan-700 text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed mx-auto"
          >
            <RefreshCw className={`w-4 h-4 ${generating ? 'animate-spin' : ''}`} />
            {generating ? 'Generating...' : 'Generate Detailed Report'}
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-slate-800/50 rounded-lg border border-slate-700">
      <div className="flex items-center justify-between p-6 border-b border-slate-700">
        <div className="flex items-center gap-3">
          <FileText className="w-6 h-6 text-cyan-400" />
          <div>
            <h3 className="text-lg font-semibold text-white">AI-Generated Detailed Report</h3>
            <p className="text-sm text-slate-400">
              Comprehensive IICRC S500 compliant report generated by AI
            </p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={handleCopy}
            className="flex items-center gap-2 px-3 py-2 text-sm bg-slate-700 hover:bg-slate-600 text-white rounded-lg transition-colors"
          >
            {copied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
            {copied ? 'Copied!' : 'Copy'}
          </button>
          <button
            onClick={handleDownload}
            className="flex items-center gap-2 px-3 py-2 text-sm bg-cyan-600 hover:bg-cyan-700 text-white rounded-lg transition-colors"
          >
            <Download className="w-4 h-4" />
            Download
          </button>
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="flex items-center gap-2 px-3 py-2 text-sm bg-slate-700 hover:bg-slate-600 text-white rounded-lg transition-colors"
          >
            {isExpanded ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
            {isExpanded ? 'Collapse' : 'Expand'}
          </button>
        </div>
      </div>
      
      {isExpanded && (
        <div className="p-6">
          <div className="bg-slate-900 rounded-lg p-6 max-h-96 overflow-y-auto">
            <div className="prose prose-invert prose-sm max-w-none">
              <ReactMarkdown
                components={{
                  h1: ({ children }) => <h1 className="text-2xl font-bold text-white mb-4">{children}</h1>,
                  h2: ({ children }) => <h2 className="text-xl font-semibold text-cyan-400 mb-3 mt-6">{children}</h2>,
                  h3: ({ children }) => <h3 className="text-lg font-medium text-cyan-300 mb-2 mt-4">{children}</h3>,
                  p: ({ children }) => <p className="text-slate-300 mb-3 leading-relaxed">{children}</p>,
                  ul: ({ children }) => <ul className="text-slate-300 mb-3 ml-4">{children}</ul>,
                  ol: ({ children }) => <ol className="text-slate-300 mb-3 ml-4">{children}</ol>,
                  li: ({ children }) => <li className="mb-1">{children}</li>,
                  strong: ({ children }) => <strong className="text-white font-semibold">{children}</strong>,
                  em: ({ children }) => <em className="text-cyan-300">{children}</em>,
                  code: ({ children }) => <code className="bg-slate-800 text-cyan-300 px-1 py-0.5 rounded text-sm">{children}</code>,
                  pre: ({ children }) => <pre className="bg-slate-800 text-slate-300 p-3 rounded mb-3 overflow-x-auto">{children}</pre>,
                  blockquote: ({ children }) => <blockquote className="border-l-4 border-cyan-500 pl-4 text-slate-400 italic mb-3">{children}</blockquote>,
                }}
              >
                {reportContent}
              </ReactMarkdown>
            </div>
          </div>
        </div>
      )}
      
      {!isExpanded && (
        <div className="p-6">
          <div className="bg-slate-900 rounded-lg p-4">
            <div className="prose prose-invert prose-sm max-w-none">
              <ReactMarkdown
                components={{
                  h1: ({ children }) => <h1 className="text-lg font-bold text-white mb-2">{children}</h1>,
                  h2: ({ children }) => <h2 className="text-base font-semibold text-cyan-400 mb-2">{children}</h2>,
                  h3: ({ children }) => <h3 className="text-sm font-medium text-cyan-300 mb-1">{children}</h3>,
                  p: ({ children }) => <p className="text-slate-300 text-sm mb-2 leading-relaxed">{children}</p>,
                  ul: ({ children }) => <ul className="text-slate-300 text-sm mb-2 ml-4">{children}</ul>,
                  ol: ({ children }) => <ol className="text-slate-300 text-sm mb-2 ml-4">{children}</ol>,
                  li: ({ children }) => <li className="mb-1">{children}</li>,
                  strong: ({ children }) => <strong className="text-white font-semibold">{children}</strong>,
                  em: ({ children }) => <em className="text-cyan-300">{children}</em>,
                }}
              >
                {reportContent ? reportContent.substring(0, 500) + '...' : ''}
              </ReactMarkdown>
            </div>
            <button
              onClick={() => setIsExpanded(true)}
              className="mt-3 text-cyan-400 hover:text-cyan-300 text-sm font-medium"
            >
              Click to view full report
            </button>
          </div>
        </div>
      )}
    </div>
  )
}
