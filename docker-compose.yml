# ============================================
# Docker Compose - Development Environment
# RestoreAssist Full Stack Application
# ============================================
# Usage: docker-compose up
# ============================================

services:
  # ==========================================
  # PostgreSQL Database
  # ==========================================
  postgres:
    image: postgres:16-alpine
    container_name: restoreassist-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: restoreassist
      POSTGRES_USER: restoreassist
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_change_me}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/backend/prisma/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U restoreassist -d restoreassist"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - restoreassist-network

  # ==========================================
  # Backend API
  # ==========================================
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
      target: development
    container_name: restoreassist-backend-dev
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://restoreassist:${POSTGRES_PASSWORD:-dev_password_change_me}@postgres:5432/restoreassist?schema=public
      DIRECT_DATABASE_URL: postgresql://restoreassist:${POSTGRES_PASSWORD:-dev_password_change_me}@postgres:5432/restoreassist?schema=public

      # JWT & Security
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-change-in-production}
      JWT_EXPIRY: ${JWT_EXPIRY:-15m}
      REFRESH_TOKEN_EXPIRY: ${REFRESH_TOKEN_EXPIRY:-7d}

      # CORS
      ALLOWED_ORIGINS: http://localhost:5173,http://localhost:80

      # Google OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI:-http://localhost:3001/api/auth/google/callback}

      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}

      # AI Services
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}

      # Email
      EMAIL_ENABLED: ${EMAIL_ENABLED:-false}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_FROM: ${EMAIL_FROM:-RestoreAssist <noreply@restoreassist.app>}

      # Sentry
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE:-0.1}

      # Development
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
    volumes:
      - ./packages/backend/src:/app/src
      - ./packages/backend/prisma:/app/prisma
      - /app/node_modules
      - /app/dist
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - restoreassist-network

  # ==========================================
  # Frontend Application
  # ==========================================
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
      target: development
    container_name: restoreassist-frontend-dev
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:3001
      VITE_APP_URL: http://localhost:5173
      VITE_APP_VERSION: ${VITE_APP_VERSION:-1.0.0-dev}
      VITE_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      VITE_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      VITE_SENTRY_DSN: ${VITE_SENTRY_DSN}
    volumes:
      - ./packages/frontend/src:/app/src
      - ./packages/frontend/public:/app/public
      - ./packages/frontend/index.html:/app/index.html
      - ./packages/frontend/vite.config.ts:/app/vite.config.ts
      - ./packages/frontend/tailwind.config.js:/app/tailwind.config.js
      - /app/node_modules
      - /app/dist
    depends_on:
      - backend
    networks:
      - restoreassist-network

  # ==========================================
  # Adminer - Database Management (Optional)
  # ==========================================
  adminer:
    image: adminer:latest
    container_name: restoreassist-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: nette
    depends_on:
      - postgres
    networks:
      - restoreassist-network
    profiles:
      - tools

# ==========================================
# Volumes
# ==========================================
volumes:
  postgres_data:
    driver: local
    name: restoreassist_postgres_data

# ==========================================
# Networks
# ==========================================
networks:
  restoreassist-network:
    driver: bridge
    name: restoreassist_network
